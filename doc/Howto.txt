0) inizio crea progetto
rails _3.2.13_ new alice -d mysql

1) In Gemfile aggiunto 'bootstrap-sass' all'interno del group :assets 
===========
# Gems used only for assets and not required
# in production environments by default.
group :assets do
  gem 'sass-rails',   '~> 4.0.0.beta1'
  gem 'coffee-rails', '~> 4.0.0.beta1'
# temi html5
  gem 'bootstrap-sass', '~> 2.3.1.0'
  # See https://github.com/sstephenson/execjs#readme for more supported runtimes
  # gem 'therubyracer', platforms: :ruby

  gem 'uglifier', '>= 1.0.3'
end

2) # per l'app server rails di sviluppo
gem 'thin'

bundle install
===========

3) app/assets/javascripts/application.js
includere bootstrap e i suoi moduli da utilizzare:

//= require bootstrap
//= require bootstrap-scrollspy
//= require bootstrap-modal
//= require bootstrap-dropdown

4) app/assets/stylesheets/application.css
rinominarlo in application.css.scss e aggiungere il contenuto:
================
.content {
  background-color: #eee;
  padding: 20px;
  margin: 0 -20px; /* negative indent the amount of the padding to maintain the grid system */
  -webkit-border-radius: 0 0 6px 6px;
  -moz-border-radius: 0 0 6px 6px;
  border-radius: 0 0 6px 6px;
  -webkit-box-shadow: 0 1px 2px rgba(0,0,0,.15);
  -moz-box-shadow: 0 1px 2px rgba(0,0,0,.15);
  box-shadow: 0 1px 2px rgba(0,0,0,.15);
}
============================

aggiungere un nuovo file per aggiungere bootstrap che verr√† incluso per 
la presenza di  *= require_tree . in application.css.scss:

bootstrap_and_overrides.css.scss
con questo contenuto:

==================
@import "bootstrap";
body { padding-top: 60px; }
@import "bootstrap-responsive";
==================

5) sostituire il layout di base per tutte le applicazioni
view/layouts/application.html.erb con questo contenuto:

================
<!doctype html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= content_for?(:title) ? yield(:title) : "Myapp" %></title>
    <meta name="description" content="">
    <meta name="author" content="">
    <%= stylesheet_link_tag "application", :media => "all" %>
    <%= javascript_include_tag "application" %>
    <%= csrf_meta_tags %>
    <%= yield(:head) %>
  </head>
  <body>
    <header class="navbar navbar-fixed-top">
      <nav class="navbar-inner">
        <div class="container">
          <%= render 'layouts/navigation' %>
        </div>
      </nav>
    </header>
    <div id="main" role="main">
      <div class="container">
        <div class="content">
           <div class="row">
            <div class="span12">
              <%= render 'layouts/messages' %>
              <%= yield %>
            </div>
          </div>
          <footer>
          </footer>
        </div>
      </div> <!--! end of .container -->
    </div> <!--! end of #main -->
  </body>
</html>
================

6) creare due file partial per il layout condiviso:

_navigation.html.erb per device

==============
<%= link_to "Home", root_path, :class => 'brand' %>
<ul class="nav">
  <% if user_signed_in? %>
    <li>
    <%= link_to('Logout', destroy_user_session_path, :method=>'delete') %>
    </li>
  <% else %>
    <li>
    <%= link_to('Login', new_user_session_path)  %>
    </li>
  <% end %>
  <% if user_signed_in? %>
    <li>
    <%= link_to('Edit account', edit_user_registration_path) %>
    </li>
  <% else %>
    <li>
    <%= link_to('Sign up', new_user_registration_path)  %>
    </li>
  <% end %>
</ul>
==========

_messages.html.erb per gli errori e gli avvisi

==========
<% flash.each do |name, msg| %>
  <% if msg.is_a?(String) %>
    <div class="alert alert-<%= name == :notice ? "success" : "error" %>">
      <a class="close" data-dismiss="alert">&#215;</a>
      <%= content_tag :div, msg, :id => "flash_#{name}" %>
    </div>
  <% end %>
<% end %>
==========

7) Simpleform
inserire in Gemfile

gem 'simple_form'

e lanciare: 

bundle install
rake db:create
rails generate simple_form:install --bootstrap

crea i seguenti file:

      create  config/initializers/simple_form.rb
      create  config/initializers/simple_form_bootstrap.rb
       exist  config/locales
      create  config/locales/simple_form.en.yml
      create  lib/templates/erb/scaffold/_form.html.erb
      
8) aggiungere un helper per gli errori generici

in app/helpers/application_helper.rb aggiungere questo metodo:
=============
  def display_base_errors resource
    return '' if (resource.errors.empty?) or (resource.errors[:base].empty?)
    messages = resource.errors[:base].map { |msg| content_tag(:p, msg) }.join
    html = <<-HTML
    <div class="alert alert-error alert-block">
      <button type="button" class="close" data-dismiss="alert">&#215;</button>
      #{messages}
    </div>
    HTML
    html.html_safe
  end
========
9) Scaffold per Licenze osi
type = P Permissiva		
	   L Lesser
       S Strong
	   N Network
	   
flag_osi = true

rails generate scaffold license name:string description:string version:string category_id:integer license_type_id:integer flag_osi:boolean text_license:text      

10) Sistemo le dimensioni dei campi e aggiungo le chiavi

class CreateLicenses < ActiveRecord::Migration
  def change
    create_table :licenses do |t|
      t.string :name,                 :limit => 15
      t.string :description,          :limit => 50
      t.string :version,              :limit => 5
      t.integer :category_id,         :limit => 4
      t.integer :license_type_id,     :limit => 4
      t.boolean :flag_osi,            :default => true
      t.text :text_license
  
      t.timestamps
    end
    
    add_index :licenses, [:name, :version], :unique => true
    add_index :licenses, :category_id
    add_index :licenses, :license_type_id
    add_index :licenses, :description
  
  end
end

11) creo database

rake db:migrate

mysql> describe licenses;
+-----------------+-------------+------+-----+---------+----------------+
| Field           | Type        | Null | Key | Default | Extra          |
+-----------------+-------------+------+-----+---------+----------------+
| id              | int(11)     | NO   | PRI | NULL    | auto_increment |
| name            | varchar(15) | YES  | MUL | NULL    |                |
| description     | varchar(50) | YES  | MUL | NULL    |                |
| version         | varchar(5)  | YES  |     | NULL    |                |
| category_id     | int(11)     | YES  | MUL | NULL    |                |
| license_type_id | int(11)     | YES  | MUL | NULL    |                |
| flag_osi        | tinyint(1)  | YES  |     | 1       |                |
| text_license    | text        | YES  |     | NULL    |                |
| created_at      | datetime    | NO   |     | NULL    |                |
| updated_at      | datetime    | NO   |     | NULL    |                |
+-----------------+-------------+------+-----+---------+----------------+
10 rows in set (0.00 sec)

===============================
12) autenticazione

gem 'devise'
bundle install
rails generate devise:install
rails generate devise User
rails generate devise Admin

rake db:migrate

13) configurare root_path in routes.rb

root to: 'licenses#index'
rinominare public/index.html in index.html.orig

14) rails s
primo test

15) aggiungere home

rails g controller home index
cambiare
root to: 'licenses#index'
in
root to: 'home#index'

16) Gestione del titolo della pagina

in application_helper.rb

def title
    "#{@title}"
end 

in it.yml

  activerecord:
    models:
      license: Licenze
  actions:
    management: "Gestione"  

in home_controller.rb

class HomeController < ApplicationController
  def index
       @title = t('actions.management') + " " + t('activerecord.models.license')
  end
end

in index.html.erb

<%= title %>

in config/application.rb

    # aggiunto per la localizzazione italiana
    config.i18n.load_path += Dir[Rails.root.join('config', 'locales', '*.{rb,yml}').to_s]
    config.i18n.locale = :it
    config.i18n.default_locale = :it

17) paginazione

gem 'will_paginate-bootstrap'

bundle install

inserire nella view:

<%= will_paginate @collection, :renderer => BootstrapPagination::Rails %>    

18) scaricare un file con il contenuto della licenza

- nuova rotta download in routes.rb:

  resources :licenses do
    get 'download'  
  end

- nuovo metodo download in licenses_controller:

  # GET /licenses/1.text
  def download
    @license = License.find(params[:license_id])

    send_data @license.text_license,
              :filename => @license.name+".txt",
              :type => "application/text"
    
  end

- link all'azione nella view (in questo caso la show)

    <%= link_to t('actions.download'), license_download_path(@license), :class => "btn" %>

19) scaffold per le categorie di licenze
    
rails generate scaffold category name:string description:string

20) Sistemo le dimensioni dei campi e aggiungo le chiavi

class CreateCategories < ActiveRecord::Migration
  def change
    create_table :categories do |t|
      t.string :name,         :limit => 15
      t.string :description,  :limit => 50

      t.timestamps
    end
    add_index :categories, [:name], :unique => true
  end
end

21) creo database

rake db:migrate

mysql> describe categories;
+-------------+-------------+------+-----+---------+----------------+
| Field       | Type        | Null | Key | Default | Extra          |
+-------------+-------------+------+-----+---------+----------------+
| id          | int(11)     | NO   | PRI | NULL    | auto_increment |
| name        | varchar(15) | YES  | UNI | NULL    |                |
| description | varchar(50) | YES  |     | NULL    |                |
| created_at  | datetime    | NO   |     | NULL    |                |
| updated_at  | datetime    | NO   |     | NULL    |                |
+-------------+-------------+------+-----+---------+----------------+
5 rows in set (0.00 sec)

22) associazione

license.rb

class License < ActiveRecord::Base
  attr_accessible :category_id, :description, :name, :text_license, :version
  
  validates_presence_of :name, :description
  
  belongs_to :category
end

category.rb

class Category < ActiveRecord::Base
  attr_accessible :description, :name
  
  validates_presence_of :name, :description
  validates_uniqueness_of :name
  
  has_many :licenses
end

Nel form di aggiornamento/inserimento delle licenze si sinserisce il tipo f.association 
con il nome dell'associazione belongs_to inserita nel modello (:category).

<%= simple_form_for(@license) do |f| %>
  <%= f.error_notification %>

  <div class="form-inputs form-horizontal">
    <%= f.input :name %>
    <%= f.input :description, :input_html => { :class => "span6" } %>
    <%= f.input :version %>
    <%= f.association :category %>
    <%= f.input :text_license, :input_html => { :class => "span7" }%>
  </div>

  <div class="form-actions">
    <%= f.button :submit %>
    <%= link_to t('actions.back'), licenses_path, :class => "btn" %>
  </div>
<% end %>

Decodifica della categoria sulla pagina index delle licenze:
...
   <td><%= license.category.name %></td>
...


23) scaffold per le typologia di licenze
    
rails generate scaffold license_type code:string description:string

24) Sistemo le dimensioni dei campi e aggiungo le chiavi

class CreateLicenseTypes < ActiveRecord::Migration
  def change
    create_table :license_types do |t|
      t.string :code,         :limit => 2
      t.string :description,  :limit => 50

      t.timestamps
    end
    add_index :license_types, [:code], :unique => true
  end
end

25) creo database

rake db:migrate

mysql> describe license_types;
+-------------+-------------+------+-----+---------+----------------+
| Field       | Type        | Null | Key | Default | Extra          |
+-------------+-------------+------+-----+---------+----------------+
| id          | int(11)     | NO   | PRI | NULL    | auto_increment |
| code        | varchar(2)  | YES  | UNI | NULL    |                |
| description | varchar(50) | YES  |     | NULL    |                |
| created_at  | datetime    | NO   |     | NULL    |                |
| updated_at  | datetime    | NO   |     | NULL    |                |
+-------------+-------------+------+-----+---------+----------------+
5 rows in set (0.00 sec)

25) associazione

type = P Permissiva		
	   L Lesser Copyleft leggero
       S Strong Copyleft forte
	   N Network

license.rb

class License < ActiveRecord::Base
  attr_accessible :license_type :category_id, :description, :name, :text_license, :version
  
  validates_presence_of :name, :description
  
  belongs_to :category
  belongs_to :license_type
end

license_type.rb

class LicenseType < ActiveRecord::Base
  attr_accessible :code, :description
  
  validates_presence_of :code, :description
  validates_uniqueness_of :code
  
  has_many :licenses
end

Nel form di aggiornamento/inserimento delle licenze si sinserisce il tipo f.association 
con il nome dell'associazione belongs_to inserita nel modello (:license_type).

<%= simple_form_for(@license) do |f| %>
  <%= f.error_notification %>

  <div class="form-inputs form-horizontal">
    <%= f.input :name %>
    <%= f.input :description, :input_html => { :class => "span6" } %>
    <%= f.input :version %>
    <%= f.association :category %>
    <%= f.association :license_type %>
    <%= f.input :text_license, :input_html => { :class => "span7" }%>
  </div>

  <div class="form-actions">
    <%= f.button :submit %>
    <%= link_to t('actions.back'), licenses_path, :class => "btn" %>
  </div>
<% end %>

Decodifica del tipo licenza sulla pagina index delle licenze:
...
   <td><%= license.license_type.description %></td>
...

26) per la gestione dei tipi di licenza

- inserire traduzioni su it.yml:   attributes:    models:
- inserire titoli su license_types_controller.rb es.: @title = t('actions.edit') + " " + t('activerecord.models.license_type')
- inserire collegamento sulla barra dei menu': _navigation.html.erb 
- modificare view di license_type: index.html.erb new.html.erb show.html.erb edit.html.erb _form.html.erb
- modifica view di license: index.html.erb tipo 

27) Gestione del prodotto

- scaffold: rails generate scaffold product name:string version:string title:string description:text license_id:integer use_id:integer checked_at:date result:boolean notes:text
- aggiustare migration xxxx_create_products.rb
- eseguire rake:db migrate per creare la tabella
- inserire traduzioni su it.yml:      models:  attributes:  flash:
- inserire validazioni e relazioni associative (belong_to) nel modello 
- inserire titoli e flash (per create e update) su products_controller.rb es.: @title = t('actions.edit') + " " + t('activerecord.models.product')
- modificare view di product: index.html.erb new.html.erb show.html.erb edit.html.erb _form.html.erb
- inserire collegamento sulla barra dei menu': _navigation.html.erb 

28) Gestione tabellina uso

- scaffold: rails generate scaffold use name:string description:string
- aggiustare migration xxxx_create_uses.rb
- eseguire rake:db migrate per creare la tabella
- inserire traduzioni su it.yml:      models:  attributes:  flash:
- inserire validazioni (validates_presence_of, validates_uniqueness_of) e relazioni associative (has_many, belong_to) nel modello 
- inserire titoli e flash (per create e update) su uses_controller.rb es.: @title = t('actions.edit') + " " + t('activerecord.models.use')
- modificare view di use: index.html.erb new.html.erb show.html.erb edit.html.erb _form.html.erb
- inserire collegamento sulla barra dei menu': _navigation.html.erb 

29) Gestione del componente

Group:	org.apache.geronimo.framework
Artifact:	geronimo-security
Version:	2.1

- scaffold: rails generate scaffold component name:string version:string title:string description:text license_id:integer use_id:integer checked_at:date result:boolean notes:text
- aggiustare migration xxxx_create_component.rb
- eseguire rake:db migrate per creare la tabella
- inserire traduzioni su it.yml:      models:  attributes:  flash:
- inserire validazioni e relazioni associative (has_and_belongs_to_many :product) nel modello component e (has_and_belongs_to_many :component) nel product 
- inserire titoli e flash (per create e update) su components_controller.rb es.: @title = t('actions.edit') + " " + t('activerecord.models.component')
- modificare view di component: index.html.erb new.html.erb show.html.erb edit.html.erb _form.html.erb
- inserire collegamento sulla barra dei menu': _navigation.html.erb 

30) Gestione della distinta base 
relazione componente prodotti e prodotto componenti

rails generate migration CreateComponentsProducts

class CreateComponentsProducts < ActiveRecord::Migration
  def up
    create_table :components_products, :id => false do |t|
      t.integer :product_id, :null => false
      t.integer :component_id, :null => false
    end  
    add_index :components_products, [:product_id, :component_id], :unique => true
    add_index :components_products, [:component_id, :product_id], :unique => true    
  end

  def down
    remove_index :components_products, :column => [:product_id, :component_id]
    remove_index :components_products, :column => [:component_id, :product_id]    
    drop_table :components_products
  end
end

rake db:migrate

31) videata dei legami

rails g controller ties index

- inserire traduzioni su it.yml:      models:
- inserire titoli su ties_controller.rb es.: @title = t('actions.listing') + " " + t('activerecord.models.ties')
- modificare view di use: index.html.erb
- inserire collegamento sulla barra dei menu': _navigation.html.erb 

- action: select in routes.rb  get "ties/select"
- link to ties_select_path(product)
- view select.html.rb

32) ricerca
- in it.yml 
  actions:
    search: "Ricerca"

- layout riusabile _search_product.erb _search_component.erb
incluso in index.html.erb e select.html.erb

- model product.rb e component.rb:

  def self.search(name, page)
   conditions = sanitize_sql_for_conditions(["name like '%s'", "%#{name}%"])      
   paginate :order => 'created_at ASC', :per_page => 12, :page => page, :conditions => conditions
  end

- ties_controller.rb in method index :
 
    @products = Product.search(params[:name], params[:page])
    @components = Component.search(params[:name], params[:page])


33) icone nei bottoni

_form.html.erb
.....
  <div class="form-actions">
    <%= button_tag(type: 'submit', class: "btn btn-primary") do %>
      <i class="icon-ok icon-white"></i> <%= t('actions.update') %>  
    <% end %>
    <%= link_to licenses_path, :class => "btn" do %>
      <i class="icon-arrow-left"></i> <%= t('actions.back') %>      
    <% end %> 
  </div>

show.html.erb
......  
  <div class="form-actions">
    <%= link_to edit_license_path(@license), :class => "btn" do %>
      <i class="icon-pencil"></i> <%= t('actions.edit') %>      
    <% end %>    
    <%= link_to license_download_path(@license), :class => "btn" do %>
      <i class="icon-download-alt"></i> <%= t('actions.download') %>      
    <% end %>    
    <%= link_to licenses_path, :class => "btn" do %>
      <i class="icon-arrow-left"></i> <%= t('actions.back') %>      
    <% end %>    
  </div>

index.html.erb
...
   <td>
      <div class="btn-group">
    	<%= link_to raw('<i class="icon-eye-open"></i>'), license, :class => "btn", :title => t('actions.show'), :alt => t('actions.show') %>
    	<%= link_to raw('<i class="icon-pencil"></i>'), edit_license_path(license), :class => "btn", :title => t('actions.edit'), :alt => t('actions.edit') %>
    	<%= link_to raw('<i class="icon-trash"></i>'), license, method: :delete, data: { confirm: t('actions.are_you_sure') }, :class => "btn", :title => t('actions.destroy'), :alt => t('actions.destroy') %>
      </div>
    </td>
    
   <%= link_to new_license_path, :class => "btn", :title => t('actions.new'), :alt => t('actions.new') do %>
    <i class="icon-plus"></i> <%= t('actions.new') %>
  <% end %>
... 

34) aggiorna legami 
  
gestione manuale dei legami
    
- routes.rb:
  get "ties/index"

  resources :components do
    get 'ties/select'
  end
  
 resources :products do
    get 'ties/select'
    get 'ties/edit'
    post 'ties/edit'
 end
              ties_index  GET    /ties/index(.:format)                           ties#index
    component_ties_select GET    /components/:component_id/ties/select(.:format) ties#select
    product_ties_select   GET    /products/:product_id/ties/select(.:format)     ties#select
      product_ties_edit   GET    /products/:product_id/ties/edit(.:format)       ties#edit
                          POST   /products/:product_id/ties/edit(.:format)       ties#edit
  
- ties_controller.rb

  def edit
    @title = t('actions.edit') + " " + t('activerecord.models.tie')
    
    @product = Product.find(params[:product_id])
    @components_ties = @product.components
    @components = Component.search(params[:component_name], params[:page])

    if !params[:component_del].nil?
      @product.del_relation(params[:component_del])
    end
    if !params[:component_add].nil?
      @product.add_relation(params[:component_add])
    end
         
    respond_to do |format|
      format.html # show.html.erb
      format.json { render json: @product }
    end    
  end    
  
- edit.html.erb

<%= form_tag product_ties_edit_path, :method => 'post' do |f| %>	
....
  <% @components.each do |component| %>
    <li>
      <label class="checkbox inline">
      <%= check_box_tag "component_add[]", component.id, false, :multiple => "true" %>
        <%= component.name+" - Vers. "+component.version %>
     </label>  
    </li>
  <% end %>
....
  <% @components_ties.each do |component_ties| %>
    <li>
      <label class="checkbox inline">
      <%= check_box_tag "component_del[]", component_ties.id, false, :multiple => "true" %>
        <%= component_ties.name+" - Vers. "+component_ties.version %>
     </label>  
    </li>
  <% end %>  
....
<%= button_tag(type: 'submit', class: "btn btn-primary", :title => t('actions.update'), :alt => t('actions.update')) do %>
  <i class="icon-ok icon-white"></i> <%= t('actions.update') %>  
<% end %>

- product.rb

  def add_relation(component_add = [])
    component_add.each do |component_id|
      component = Component.find(component_id)
      unless self.components.include?(component)
        components<<component
      end
    end
  end

  def del_relation(component_del = [])
   component_del.each do |component_id|
      component = Component.find(component_id)
      if self.components.include?(component)
        components.delete(component)
      end  
    end    
  end
  
35) regole

- database

rails generate scaffold rule name:string license_id:integer plus:boolean
rails g scaffold rule_entry rule:references license_id:integer plus:boolean order:integer
          
class CreateRules < ActiveRecord::Migration
  def change
    create_table :rules do |t|
      t.string  :name
      t.integer :license_id
      t.boolean :plus

      t.timestamps
    end
    add_index :rules, :license_id
  end
end

class CreateRuleEntries < ActiveRecord::Migration
  def change
    create_table :rule_datas do |t|
      t.references :rule
      t.integer :license_id
      t.boolean :plus
      t.integer :order

      t.timestamps
    end
    add_index :rule_entries, [:license_id, :order], :unique => true
  end
end

rake db:migrate

- routes

  resources :rules do
    resources :rule_entries
  end
  
- view

index
....

36) creazione pagina di about

 rails g controller about index lispa alice

